This project analyses how the Minimax algorithm (with and without pruning), Tabular Q-Learning, and a default opponent (skill level is slightly better than random) 
compare when playing against each other in Tic-Tac-Toe and Connect-4.

NB: This project was created using Python version 3.11.0, please download this version of Python to run this project
    as it will not work when using an Python version older than 3.10, and may not work if 3.11 is not used. 


The code to create the Tic-Tac-Toe game was retrieved from the following GitHub repository:
https://github.com/code-io0/tic-tac-toe-minimax/blob/main/main.py
Please note that the Minimax algorithm found in this repository was modified in order to provide consistency between the algorithms
implementated in the 2 games
        
The code to create the Connect-4 game was retrieved from the following GitHub repository:
https://github.com/KeithGalli/Connect4-Python/blob/master/connect4_with_ai.py
Please note that the Minimax algorithm found in this repository was modified in order to provide consistency between the algorithms
implementated in the 2 games

TicTacToe_utilities: Contains the board, x, and o images that are used to create the TicTacToe game 

TicTacToe.py: Executes any of the previously mentioned algorithms to play TicTacToe.
              The user selects which algorithm they would like to use and play against.
              The user also selects the number of games they would like to play.  
        Command to run: 'python TicTacToe.py' OR 'py TicTacToe.py'
        NB: The program may take a minute to start once the Tic-Tac-Toe board has been created,
            if this is the case then I found that it is usually quicker to stop the program's execution after a few seconds and
            re-run and it will usually execute quicker after a small number or re-runs.

Connect4.py: Executes any of the previously mentioned algorithms to play Connect-4.
             The user selects which algorithm they would like to use and play against.
             The user also selects the number of games they would like to play.  
        Command to run: 'python Connect4.py' OR 'py Connect4.py'
        NB: The game board may freeze if the user selects a large number of games, however the program is still running and
            you can see the current state of the board in the command line, regardless of the state of the board generated by pygame.